import pygame
import sys
from settings import *
# Инициализация Pygame
pygame.init()

# Настройки окна
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Финальные титры")
clock = pygame.time.Clock()

# Увеличенный размер шрифта
font = pygame.font.Font(None, 32)  # Увеличиваем размер шрифта

# Огромные титры
credits = [
    "Спасибо за игру!",
    "",
    "Разработчики:",
    "Основной разработчик: van1ex",
    "Помощник разработчика: ripple",
    "Система и архитектура: van1ex",
    "Сетевой код: ripple",
    "Системы ввода/вывода: van1ex",
    "Проектирование интерфейса: ripple",
    "Тестировщики:",
    "alexDev, gameTester, gamer123, bugHunter, superTester, testMaster",
    "Пользовательские тесты: qualityAssurer, feedbackProvider",
    "Поддержка и взаимодействие с игроками: ripple",
    "",
    "Музыка:",
    "Основной композитор: van1ex",
    "Звуковые эффекты: ripple",
    "Дополнительные треки: musicMaster, soundWave",
    "Оформление звуковых эффектов: ripple",
    "Оформление музыкальных треков: van1ex",
    "Музыка для меню: ripple",
    "Музыка для игрового процесса: van1ex",
    "Специальные эффекты звука: soundFXCrew",
    "",
    "Графика:",
    "Основной художник: ripple",
    "Дополнительные ресурсы: van1ex",
    "Концепт-арт: designPro",
    "Анимация: ripple",
    "Создание фонов: van1ex",
    "Рисование персонажей: ripple",
    "Рисование предметов: van1ex",
    "UI/UX дизайн: ripple",
    "Дополнительные графические элементы: graphicGuru, artMaster",
    "",
    "Геймдизайн:",
    "Идея и концепт игры: van1ex и ripple",
    "Проектирование уровней: ripple",
    "Механики и баланс: van1ex",
    "Экономика игры: ripple",
    "Проектирование диалогов и событий: van1ex",
    "Искусственный интеллект: ripple",
    "Создание квестов и миссий: van1ex",
    "Обработка взаимодействий с миром: ripple",
    "Балансировка сложности: van1ex",
    "Планирование сюжетных поворотов: ripple",
    "",
    "Технологии и инструменты:",
    "Игровой движок: Unity",
    "Графика: Pygame, OpenGL, Blender",
    "Звук: Audacity, FL Studio",
    "Технические библиотеки: numpy, pillow, pygame",
    "Система управления версиями: Git, GitHub",
    "Серверная часть и взаимодействие с API: Node.js, Express",
    "Хостинг: AWS, DigitalOcean",
    "Контейнеризация: Docker",
    "Система CI/CD: Jenkins, GitHub Actions",
    "Проектирование и управление задачами: Jira, Trello",
    "",
    "Программирование и оптимизация:",
    "Основной код: van1ex",
    "Оптимизация алгоритмов: ripple",
    "Тестирование и отладка: van1ex и ripple",
    "Обработка ошибок и баг-фиксинг: ripple",
    "Производительность: van1ex",
    "Реализация искусственного интеллекта: ripple",
    "Модульная интеграция: van1ex",
    "Сетевые взаимодействия: ripple",
    "",
    "Благодарности:",
    "Всем, кто поддерживал проект!",
    "Особая благодарность нашим тестировщикам, игрокам и фанатам!",
    "Особая благодарность нашим семьям за терпение и поддержку!",
    "Ваши отзывы и поддержка вдохновляют нас на новые проекты.",
    "Спасибо всем, кто оставил положительные отзывы и поделился нашей игрой с друзьями.",
    "Благодарим всех, кто помогал на каждом этапе разработки, и всех наших поклонников!",
    "",
    "Социальные сети и поддержка:",
    "Подписывайтесь на нас в социальных сетях:",
    "Twitter: @van1ex_game",
    "Instagram: @ripple_art",
    "VK: vk.com/van1ex_ripple",
    "Поддержите наш проект на Patreon!",
    "Станьте частью нашей команды и помогите нам делать игры!",
    "Discord: discord.gg/van1ex_ripple",
    "",
    "Лицензии:",
    "Использованные лицензии и материалы:",
    "Программное обеспечение: Unity, Pygame, Blender",
    "Библиотеки: pygame, numpy, pillow, requests",
    "Музыка: free-to-use music from SoundCloud",
    "Все авторские права принадлежат их владельцам.",
    "Лицензия: MIT",
    "",
    "Краудфандинг:",
    "Спасибо всем нашим спонсорам и поклонникам на Kickstarter и Patreon!",
    "Ваши пожертвования помогли сделать этот проект возможным.",
    "Мы продолжаем работать благодаря вашей поддержке!",
    "Мы с нетерпением ждем продолжения нашего путешествия с вами!",
    "",
    "Будущие проекты:",
    "Мы уже работаем над новыми играми и проектами!",
    "Следите за нашими новыми анонсами в социальных сетях.",
    "Спасибо за то, что стали частью этого путешествия.",
    "До встречи в следующем проекте!",
    "",
    "Спасибо за внимание!",
    "До встречи в следующем проекте!"
]

# Основной игровой цикл
def show_credits():
    pygame.mixer.music.load('songs/final.mp3')  # Загружаем музыку
    pygame.mixer.music.set_volume(1)
    pygame.mixer.music.play(start=60)  # Воспроизводим музыку бесконечно
    y_offset = HEIGHT  # Начальная позиция текста (нижняя часть экрана)
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # Очистка экрана
        screen.fill((0, 0, 0))

        # Отрисовка титров
        for i, line in enumerate(credits):
            text_surface = font.render(line, True, (255, 255, 255))
            text_rect = text_surface.get_rect(center=(WIDTH // 2, y_offset + i * 100))  # Увеличиваем интервал
            screen.blit(text_surface, text_rect)

        # Прокрутка титров вверх
        y_offset -= 2  # Увеличиваем скорость прокрутки

        # Завершение, если титры закончились
        if y_offset + len(credits) * 100 < 0:  # Учитываем размер титров
            running = False

        pygame.display.flip()
        clock.tick(60)

    pygame.quit()
    sys.exit()
